# .env.example - Configuration for Twitch TTS Bot

# -- Twitch Configuration --
# Your Twitch username (the account that will connect to IRC and send/receive messages)
TWITCH_BOT_USERNAME=your_twitch_developer_username

# Channels for the bot to join (comma-separated, no #).
# For development, you can list them here.
# For production on Cloud Run, this is typically managed via Firestore (see ChannelManager)
# or can be a fallback if Firestore is unavailable.
TWITCH_CHANNELS=yourtargetchannel,anotherchannel

# Twitch Application Credentials (Create an app at https://dev.twitch.tv/console)
# Used for API calls (e.g., validating users, potentially for future features).
TWITCH_CLIENT_ID=your_twitch_application_client_id
TWITCH_CLIENT_SECRET=your_twitch_application_client_secret

# -- Wavespeed AI API Configuration --
# Your API token from Wavespeed AI (https://wavespeed.ai/settings)
WAVESPEED_API_KEY=your_wavespeed_api_key_here

# Optional: Override the default Wavespeed API endpoint
# WAVESPEED_API_ENDPOINT=https://api.wavespeed.ai/api/v3/minimax/speech-02-turbo

# -- TTS Defaults (Optional - can be overridden by channel-specific settings) --
TTS_DEFAULT_VOICE_ID="Friendly_Person"
TTS_DEFAULT_EMOTION="neutral"
TTS_DEFAULT_SPEED=1.0
TTS_DEFAULT_PITCH=0
TTS_DEFAULT_VOLUME=1.0
TTS_DEFAULT_LANGUAGE_BOOST="auto"

# -- Google Cloud Configuration --
# Your Google Cloud Project ID (used by Firestore, Secret Manager)
# GOOGLE_CLOUD_PROJECT=your-gcp-project-id # Often set in the Cloud Run environment directly

# Name of the secret in Google Secret Manager holding the Twitch User Refresh Token
# for the TWITCH_BOT_USERNAME account.
# Format: projects/YOUR_PROJECT_ID/secrets/YOUR_SECRET_NAME/versions/latest
TWITCH_BOT_REFRESH_TOKEN_SECRET_NAME=projects/your-gcp-project-id/secrets/twitch-bot-refresh-token/versions/latest

# Optional: If you store the Wavespeed API Key in Secret Manager for production
# WAVESPEED_API_KEY_SECRET_NAME=projects/your-gcp-project-id/secrets/wavespeed-api-key/versions/latest

# -- Application Behavior --
# How often to fetch stream info (game, title) in seconds. (Not directly used by TTS but part of ChatSage core)
# STREAM_INFO_FETCH_INTERVAL_SECONDS=120

# Logging level (trace, debug, info, warn, error, fatal)
LOG_LEVEL=info

# Enable human-readable "pretty" logs for local development (true/false)
# For Cloud Run (production), this should typically be false to output JSON.
PINO_PRETTY_LOGGING=true

# Node environment
NODE_ENV=development # or production

# -- Web UI Integration --
# JWT secret for signing viewer preference tokens (must match the web UI JWT_SECRET_KEY)
# Generate a secure random string: openssl rand -base64 32
JWT_SECRET_KEY=your_jwt_secret_here_must_match_web_ui

# Base URL for the ChatVibes web UI (used for viewer preferences links)
WEB_UI_BASE_URL=https://tts.wildcat.chat

#Allow-list
ALLOWED_CHANNELS_SECRET_NAME=

# -- EventSub Configuration --
# Public URL for EventSub webhook callbacks (HTTPS required for production)
# For local development with tunneling (ngrok/cloudflared), use the tunnel URL
# For Cloud Run, use your deployed service URL (e.g., https://your-service-xxxxx.run.app)
PUBLIC_URL=https://your-service-url-here.run.app

# Secret for verifying EventSub webhook signatures (generate with: openssl rand -hex 32)
# This must match the secret you use when creating EventSub subscriptions
TWITCH_EVENTSUB_SECRET=your_eventsub_secret_here

# For local development only: bypass signature verification (DO NOT USE IN PRODUCTION)
# EVENTSUB_BYPASS=false